{
  "version": 3,
  "sources": ["../../../../../node_modules/inflection/lib/inflection.js"],
  "sourcesContent": ["/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n( function ( root, factory ){\n  if( typeof define === 'function' && define.amd ){\n    define([], factory );\n  }else if( typeof exports === 'object' ){\n    module.exports = factory();\n  }else{\n    root.inflection = factory();\n  }\n}( this, function (){\n\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n    // 'access',\n    'accommodation',\n    'adulthood',\n    'advertising',\n    'advice',\n    'aggression',\n    'aid',\n    'air',\n    'aircraft',\n    'alcohol',\n    'anger',\n    'applause',\n    'arithmetic',\n    // 'art',\n    'assistance',\n    'athletics',\n    // 'attention',\n\n    'bacon',\n    'baggage',\n    // 'ballet',\n    // 'beauty',\n    'beef',\n    // 'beer',\n    // 'behavior',\n    'biology',\n    // 'billiards',\n    'blood',\n    'botany',\n    // 'bowels',\n    'bread',\n    // 'business',\n    'butter',\n\n    'carbon',\n    'cardboard',\n    'cash',\n    'chalk',\n    'chaos',\n    'chess',\n    'crossroads',\n    'countryside',\n\n    // 'damage',\n    'dancing',\n    // 'danger',\n    'deer',\n    // 'delight',\n    // 'dessert',\n    'dignity',\n    'dirt',\n    // 'distribution',\n    'dust',\n\n    'economics',\n    'education',\n    'electricity',\n    // 'employment',\n    // 'energy',\n    'engineering',\n    'enjoyment',\n    // 'entertainment',\n    'envy',\n    'equipment',\n    'ethics',\n    'evidence',\n    'evolution',\n\n    // 'failure',\n    // 'faith',\n    'fame',\n    'fiction',\n    // 'fish',\n    'flour',\n    'flu',\n    'food',\n    // 'freedom',\n    // 'fruit',\n    'fuel',\n    'fun',\n    // 'funeral',\n    'furniture',\n\n    'gallows',\n    'garbage',\n    'garlic',\n    // 'gas',\n    'genetics',\n    // 'glass',\n    'gold',\n    'golf',\n    'gossip',\n    'grammar',\n    // 'grass',\n    'gratitude',\n    'grief',\n    // 'ground',\n    'guilt',\n    'gymnastics',\n\n    // 'hair',\n    'happiness',\n    'hardware',\n    'harm',\n    'hate',\n    'hatred',\n    'health',\n    'heat',\n    // 'height',\n    'help',\n    'homework',\n    'honesty',\n    'honey',\n    'hospitality',\n    'housework',\n    'humour',\n    'hunger',\n    'hydrogen',\n\n    'ice',\n    'importance',\n    'inflation',\n    'information',\n    // 'injustice',\n    'innocence',\n    // 'intelligence',\n    'iron',\n    'irony',\n\n    'jam',\n    // 'jealousy',\n    // 'jelly',\n    'jewelry',\n    // 'joy',\n    'judo',\n    // 'juice',\n    // 'justice',\n\n    'karate',\n    // 'kindness',\n    'knowledge',\n\n    // 'labour',\n    'lack',\n    // 'land',\n    'laughter',\n    'lava',\n    'leather',\n    'leisure',\n    'lightning',\n    'linguine',\n    'linguini',\n    'linguistics',\n    'literature',\n    'litter',\n    'livestock',\n    'logic',\n    'loneliness',\n    // 'love',\n    'luck',\n    'luggage',\n\n    'macaroni',\n    'machinery',\n    'magic',\n    // 'mail',\n    'management',\n    'mankind',\n    'marble',\n    'mathematics',\n    'mayonnaise',\n    'measles',\n    // 'meat',\n    // 'metal',\n    'methane',\n    'milk',\n    'minus',\n    'money',\n    // 'moose',\n    'mud',\n    'music',\n    'mumps',\n\n    'nature',\n    'news',\n    'nitrogen',\n    'nonsense',\n    'nurture',\n    'nutrition',\n\n    'obedience',\n    'obesity',\n    // 'oil',\n    'oxygen',\n\n    // 'paper',\n    // 'passion',\n    'pasta',\n    'patience',\n    // 'permission',\n    'physics',\n    'poetry',\n    'pollution',\n    'poverty',\n    // 'power',\n    'pride',\n    // 'production',\n    // 'progress',\n    // 'pronunciation',\n    'psychology',\n    'publicity',\n    'punctuation',\n\n    // 'quality',\n    // 'quantity',\n    'quartz',\n\n    'racism',\n    // 'rain',\n    // 'recreation',\n    'relaxation',\n    'reliability',\n    'research',\n    'respect',\n    'revenge',\n    'rice',\n    'rubbish',\n    'rum',\n\n    'safety',\n    // 'salad',\n    // 'salt',\n    // 'sand',\n    // 'satire',\n    'scenery',\n    'seafood',\n    'seaside',\n    'series',\n    'shame',\n    'sheep',\n    'shopping',\n    // 'silence',\n    'sleep',\n    // 'slang'\n    'smoke',\n    'smoking',\n    'snow',\n    'soap',\n    'software',\n    'soil',\n    // 'sorrow',\n    // 'soup',\n    'spaghetti',\n    // 'speed',\n    'species',\n    // 'spelling',\n    // 'sport',\n    'steam',\n    // 'strength',\n    'stuff',\n    'stupidity',\n    // 'success',\n    // 'sugar',\n    'sunshine',\n    'symmetry',\n\n    // 'tea',\n    'tennis',\n    'thirst',\n    'thunder',\n    'timber',\n    // 'time',\n    // 'toast',\n    // 'tolerance',\n    // 'trade',\n    'traffic',\n    'transportation',\n    // 'travel',\n    'trust',\n\n    // 'understanding',\n    'underwear',\n    'unemployment',\n    'unity',\n    // 'usage',\n\n    'validity',\n    'veal',\n    'vegetation',\n    'vegetarianism',\n    'vengeance',\n    'violence',\n    // 'vision',\n    'vitality',\n\n    'warmth',\n    // 'water',\n    'wealth',\n    'weather',\n    // 'weight',\n    'welfare',\n    'wheat',\n    // 'whiskey',\n    // 'width',\n    'wildlife',\n    // 'wine',\n    'wisdom',\n    // 'wood',\n    // 'wool',\n    // 'work',\n\n    // 'yeast',\n    'yoga',\n\n    'zinc',\n    'zoology'\n  ];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural : {\n      men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),\n      people    : new RegExp( '(pe)ople$'                      , 'gi' ),\n      children  : new RegExp( '(child)ren$'                    , 'gi' ),\n      tia       : new RegExp( '([ti])a$'                       , 'gi' ),\n      analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),\n      hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),\n      curves    : new RegExp( '(curve)s$'                      , 'gi' ),\n      lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),\n      aves      : new RegExp( '([a])ves$'                      , 'gi' ),\n      foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),\n      movies    : new RegExp( '(m)ovies$'                      , 'gi' ),\n      aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),\n      series    : new RegExp( '(s)eries$'                      , 'gi' ),\n      xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),\n      mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),\n      buses     : new RegExp( '(bus)es$'                       , 'gi' ),\n      oes       : new RegExp( '(o)es$'                         , 'gi' ),\n      shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),\n      crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),\n      octopi    : new RegExp( '(octop|vir)i$'                  , 'gi' ),\n      aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),\n      summonses : new RegExp( '^(summons)es$'                  , 'gi' ),\n      oxen      : new RegExp( '^(ox)en'                        , 'gi' ),\n      matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),\n      vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),\n      feet      : new RegExp( '^feet$'                         , 'gi' ),\n      teeth     : new RegExp( '^teeth$'                        , 'gi' ),\n      geese     : new RegExp( '^geese$'                        , 'gi' ),\n      quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),\n      whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),\n      criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),\n      genera    : new RegExp( '^genera$'                       , 'gi' ),\n      ss        : new RegExp( 'ss$'                            , 'gi' ),\n      s         : new RegExp( 's$'                             , 'gi' )\n    },\n\n    singular : {\n      man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),\n      person    : new RegExp( '(pe)rson$'                    , 'gi' ),\n      child     : new RegExp( '(child)$'                     , 'gi' ),\n      ox        : new RegExp( '^(ox)$'                       , 'gi' ),\n      axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),\n      octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),\n      alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),\n      summons   : new RegExp( '^(summons)$'                  , 'gi' ),\n      bus       : new RegExp( '(bu)s$'                       , 'gi' ),\n      buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),\n      tium      : new RegExp( '([ti])um$'                    , 'gi' ),\n      sis       : new RegExp( 'sis$'                         , 'gi' ),\n      ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),\n      hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),\n      aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),\n      x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),\n      matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),\n      vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),\n      mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),\n      foot      : new RegExp( '^foot$'                       , 'gi' ),\n      tooth     : new RegExp( '^tooth$'                      , 'gi' ),\n      goose     : new RegExp( '^goose$'                      , 'gi' ),\n      quiz      : new RegExp( '(quiz)$'                      , 'gi' ),\n      whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),\n      criterion : new RegExp( '^(criteri)on$'                , 'gi' ),\n      genus     : new RegExp( '^genus$'                      , 'gi' ),\n      s         : new RegExp( 's$'                           , 'gi' ),\n      common    : new RegExp( '$'                            , 'gi' )\n    }\n  };\n\n  var plural_rules = [\n\n    // do not replace if its already a plural word\n    [ regex.plural.men       ],\n    [ regex.plural.people    ],\n    [ regex.plural.children  ],\n    [ regex.plural.tia       ],\n    [ regex.plural.analyses  ],\n    [ regex.plural.hives     ],\n    [ regex.plural.curves    ],\n    [ regex.plural.lrves     ],\n    [ regex.plural.foves     ],\n    [ regex.plural.aeiouyies ],\n    [ regex.plural.series    ],\n    [ regex.plural.movies    ],\n    [ regex.plural.xes       ],\n    [ regex.plural.mice      ],\n    [ regex.plural.buses     ],\n    [ regex.plural.oes       ],\n    [ regex.plural.shoes     ],\n    [ regex.plural.crises    ],\n    [ regex.plural.octopi    ],\n    [ regex.plural.aliases   ],\n    [ regex.plural.summonses ],\n    [ regex.plural.oxen      ],\n    [ regex.plural.matrices  ],\n    [ regex.plural.feet      ],\n    [ regex.plural.teeth     ],\n    [ regex.plural.geese     ],\n    [ regex.plural.quizzes   ],\n    [ regex.plural.whereases ],\n    [ regex.plural.criteria  ],\n    [ regex.plural.genera    ],\n\n    // original rule\n    [ regex.singular.man      , '$1en' ],\n    [ regex.singular.person   , '$1ople' ],\n    [ regex.singular.child    , '$1ren' ],\n    [ regex.singular.ox       , '$1en' ],\n    [ regex.singular.axis     , '$1es' ],\n    [ regex.singular.octopus  , '$1i' ],\n    [ regex.singular.alias    , '$1es' ],\n    [ regex.singular.summons  , '$1es' ],\n    [ regex.singular.bus      , '$1ses' ],\n    [ regex.singular.buffalo  , '$1oes' ],\n    [ regex.singular.tium     , '$1a' ],\n    [ regex.singular.sis      , 'ses' ],\n    [ regex.singular.ffe      , '$1$2ves' ],\n    [ regex.singular.hive     , '$1ves' ],\n    [ regex.singular.aeiouyy  , '$1ies' ],\n    [ regex.singular.matrix   , '$1ices' ],\n    [ regex.singular.vertex   , '$1ices' ],\n    [ regex.singular.x        , '$1es' ],\n    [ regex.singular.mouse    , '$1ice' ],\n    [ regex.singular.foot     , 'feet' ],\n    [ regex.singular.tooth    , 'teeth' ],\n    [ regex.singular.goose    , 'geese' ],\n    [ regex.singular.quiz     , '$1zes' ],\n    [ regex.singular.whereas  , '$1es' ],\n    [ regex.singular.criterion, '$1a' ],\n    [ regex.singular.genus    , 'genera' ],\n\n    [ regex.singular.s     , 's' ],\n    [ regex.singular.common, 's' ]\n  ];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n\n    // do not replace if its already a singular word\n    [ regex.singular.man     ],\n    [ regex.singular.person  ],\n    [ regex.singular.child   ],\n    [ regex.singular.ox      ],\n    [ regex.singular.axis    ],\n    [ regex.singular.octopus ],\n    [ regex.singular.alias   ],\n    [ regex.singular.summons ],\n    [ regex.singular.bus     ],\n    [ regex.singular.buffalo ],\n    [ regex.singular.tium    ],\n    [ regex.singular.sis     ],\n    [ regex.singular.ffe     ],\n    [ regex.singular.hive    ],\n    [ regex.singular.aeiouyy ],\n    [ regex.singular.x       ],\n    [ regex.singular.matrix  ],\n    [ regex.singular.mouse   ],\n    [ regex.singular.foot    ],\n    [ regex.singular.tooth   ],\n    [ regex.singular.goose   ],\n    [ regex.singular.quiz    ],\n    [ regex.singular.whereas ],\n    [ regex.singular.criterion ],\n    [ regex.singular.genus ],\n\n    // original rule\n    [ regex.plural.men      , '$1an' ],\n    [ regex.plural.people   , '$1rson' ],\n    [ regex.plural.children , '$1' ],\n    [ regex.plural.genera   , 'genus'],\n    [ regex.plural.criteria , '$1on'],\n    [ regex.plural.tia      , '$1um' ],\n    [ regex.plural.analyses , '$1$2sis' ],\n    [ regex.plural.hives    , '$1ve' ],\n    [ regex.plural.curves   , '$1' ],\n    [ regex.plural.lrves    , '$1f' ],\n    [ regex.plural.aves     , '$1ve' ],\n    [ regex.plural.foves    , '$1fe' ],\n    [ regex.plural.movies   , '$1ovie' ],\n    [ regex.plural.aeiouyies, '$1y' ],\n    [ regex.plural.series   , '$1eries' ],\n    [ regex.plural.xes      , '$1' ],\n    [ regex.plural.mice     , '$1ouse' ],\n    [ regex.plural.buses    , '$1' ],\n    [ regex.plural.oes      , '$1' ],\n    [ regex.plural.shoes    , '$1' ],\n    [ regex.plural.crises   , '$1is' ],\n    [ regex.plural.octopi   , '$1us' ],\n    [ regex.plural.aliases  , '$1' ],\n    [ regex.plural.summonses, '$1' ],\n    [ regex.plural.oxen     , '$1' ],\n    [ regex.plural.matrices , '$1ix' ],\n    [ regex.plural.vertices , '$1ex' ],\n    [ regex.plural.feet     , 'foot' ],\n    [ regex.plural.teeth    , 'tooth' ],\n    [ regex.plural.geese    , 'goose' ],\n    [ regex.plural.quizzes  , '$1' ],\n    [ regex.plural.whereases, '$1' ],\n\n    [ regex.plural.ss, 'ss' ],\n    [ regex.plural.s , '' ]\n  ];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = [\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\n  ];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\n  var underbar          = new RegExp( '_', 'g' );\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\n  var underbar_prefix   = new RegExp( '^_' );\n\n  var inflector = {\n\n  /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */\n    _apply_rules : function ( str, rules, skip, override ){\n      if( override ){\n        str = override;\n      }else{\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\n\n        if( !ignore ){\n          var i = 0;\n          var j = rules.length;\n\n          for( ; i < j; i++ ){\n            if( str.match( rules[ i ][ 0 ])){\n              if( rules[ i ][ 1 ] !== undefined ){\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */\n    indexOf : function ( arr, item, from_index, compare_func ){\n      if( !from_index ){\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i     = from_index;\n      var j     = arr.length;\n\n      for( ; i < j; i++ ){\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n\n\n  /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopi'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */\n    pluralize : function ( str, plural ){\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n    },\n\n\n\n  /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopi' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */\n    singularize : function ( str, singular ){\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n    },\n\n\n  /**\n   * This function will pluralize or singularlize a String appropriately based on an integer value\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Number} count The number to base pluralization off of.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.inflect( 'people' 1 ); // === 'person'\n   *     inflection.inflect( 'octopi' 1 ); // === 'octopus'\n   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n   *     inflection.inflect( 'person', 2 ); // === 'people'\n   *     inflection.inflect( 'octopus', 2 ); // === 'octopi'\n   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n   */\n    inflect : function ( str, count, singular, plural ){\n      count = parseInt( count, 10 );\n\n      if( isNaN( count )) return str;\n\n      if( count === 0 || count > 1 ){\n        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n      }else{\n        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n      }\n    },\n\n\n\n  /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */\n    camelize : function ( str, low_first_letter ){\n      var str_path = str.split( '/' );\n      var i        = 0;\n      var j        = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for( ; i < j; i++ ){\n        str_arr = str_path[ i ].split( '_' );\n        k       = 0;\n        l       = str_arr.length;\n\n        for( ; k < l; k++ ){\n          if( k !== 0 ){\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\n          }\n\n          first = str_arr[ k ].charAt( 0 );\n          first = low_first_letter && i === 0 && k === 0\n            ? first.toLowerCase() : first.toUpperCase();\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\n        }\n\n        str_path[ i ] = str_arr.join( '' );\n      }\n\n      return str_path.join( '::' );\n    },\n\n\n\n  /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */\n    underscore : function ( str, all_upper_case ){\n      if( all_upper_case && str === str.toUpperCase()) return str;\n\n      var str_path = str.split( '::' );\n      var i        = 0;\n      var j        = str_path.length;\n\n      for( ; i < j; i++ ){\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\n      }\n\n      return str_path.join( '/' ).toLowerCase();\n    },\n\n\n\n  /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */\n    humanize : function ( str, low_first_letter ){\n      str = str.toLowerCase();\n      str = str.replace( id_suffix, '' );\n      str = str.replace( underbar, ' ' );\n\n      if( !low_first_letter ){\n        str = inflector.capitalize( str );\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */\n    capitalize : function ( str ){\n      str = str.toLowerCase();\n\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n    },\n\n\n\n  /**\n   * This function replaces underscores with dashes in the string.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underscores with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */\n    dasherize : function ( str ){\n      return str.replace( space_or_underbar, '-' );\n    },\n\n\n\n  /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */\n    titleize : function ( str ){\n      str         = str.toLowerCase().replace( underbar, ' ' );\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n      var d, k, l;\n\n      for( ; i < j; i++ ){\n        d = str_arr[ i ].split( '-' );\n        k = 0;\n        l = d.length;\n\n        for( ; k < l; k++){\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\n            d[ k ] = inflector.capitalize( d[ k ]);\n          }\n        }\n\n        str_arr[ i ] = d.join( '-' );\n      }\n\n      str = str_arr.join( ' ' );\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */\n    demodulize : function ( str ){\n      var str_arr = str.split( '::' );\n\n      return str_arr[ str_arr.length - 1 ];\n    },\n\n\n\n  /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */\n    tableize : function ( str ){\n      str = inflector.underscore( str );\n      str = inflector.pluralize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */\n    classify : function ( str ){\n      str = inflector.camelize( str );\n      str = inflector.singularize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\n    foreign_key : function ( str, drop_id_ubar ){\n      str = inflector.demodulize( str );\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */\n    ordinalize : function ( str ){\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n\n      for( ; i < j; i++ ){\n        var k = parseInt( str_arr[ i ], 10 );\n\n        if( !isNaN( k )){\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\n          var suf = 'th';\n\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\n            if( ld === '1' ){\n              suf = 'st';\n            }else if( ld === '2' ){\n              suf = 'nd';\n            }else if( ld === '3' ){\n              suf = 'rd';\n            }\n          }\n\n          str_arr[ i ] += suf;\n        }\n      }\n\n      return str_arr.join( ' ' );\n    },\n\n  /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */\n    transform : function ( str, arr ){\n      var i = 0;\n      var j = arr.length;\n\n      for( ;i < j; i++ ){\n        var method = arr[ i ];\n\n        if( inflector.hasOwnProperty( method )){\n          str = inflector[ method ]( str );\n        }\n      }\n\n      return str;\n    }\n  };\n\n/**\n * @public\n */\n  inflector.version = '1.12.0';\n\n  return inflector;\n}));\n"],
  "mappings": "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",
  "names": []
}
