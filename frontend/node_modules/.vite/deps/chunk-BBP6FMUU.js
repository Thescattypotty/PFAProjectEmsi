import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-PVU4IUQ2.js";
import {
  _extends,
  init_extends
} from "./chunk-TBWISHCD.js";
import {
  require_react
} from "./chunk-TPBF7RJF.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// ../../node_modules/@mui/material/useScrollTrigger/useScrollTrigger.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
"use client";
var _excluded = ["getTrigger", "target"];
function defaultTrigger(store, options) {
  const {
    disableHysteresis = false,
    threshold = 100,
    target
  } = options;
  const previous = store.current;
  if (target) {
    store.current = target.pageYOffset !== void 0 ? target.pageYOffset : target.scrollTop;
  }
  if (!disableHysteresis && previous !== void 0) {
    if (store.current < previous) {
      return false;
    }
  }
  return store.current > threshold;
}
var defaultTarget = typeof window !== "undefined" ? window : null;
function useScrollTrigger(options = {}) {
  const {
    getTrigger = defaultTrigger,
    target = defaultTarget
  } = options, other = _objectWithoutPropertiesLoose(options, _excluded);
  const store = React.useRef();
  const [trigger, setTrigger] = React.useState(() => getTrigger(store, other));
  React.useEffect(() => {
    const handleScroll = () => {
      setTrigger(getTrigger(store, _extends({
        target
      }, other)));
    };
    handleScroll();
    target.addEventListener("scroll", handleScroll, {
      passive: true
    });
    return () => {
      target.removeEventListener("scroll", handleScroll, {
        passive: true
      });
    };
  }, [target, getTrigger, JSON.stringify(other)]);
  return trigger;
}

// ../../node_modules/@mui/material/useScrollTrigger/index.js
"use client";

export {
  useScrollTrigger
};
//# sourceMappingURL=chunk-BBP6FMUU.js.map
