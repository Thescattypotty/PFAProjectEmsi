{
  "version": 3,
  "sources": ["../../../../../node_modules/css-mediaquery/index.js"],
  "sourcesContent": ["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\nexports.match = matchQuery;\nexports.parse = parseQuery;\n\n// -----------------------------------------------------------------------------\n\nvar RE_MEDIA_QUERY     = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,\n    RE_MQ_EXPRESSION   = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,\n    RE_MQ_FEATURE      = /^(?:(min|max)-)?(.+)/,\n    RE_LENGTH_UNIT     = /(em|rem|px|cm|mm|in|pt|pc)?$/,\n    RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\n\nfunction matchQuery(mediaQuery, values) {\n    return parseQuery(mediaQuery).some(function (query) {\n        var inverse = query.inverse;\n\n        // Either the parsed or specified `type` is \"all\", or the types must be\n        // equal for a match.\n        var typeMatch = query.type === 'all' || values.type === query.type;\n\n        // Quit early when `type` doesn't match, but take \"not\" into account.\n        if ((typeMatch && inverse) || !(typeMatch || inverse)) {\n            return false;\n        }\n\n        var expressionsMatch = query.expressions.every(function (expression) {\n            var feature  = expression.feature,\n                modifier = expression.modifier,\n                expValue = expression.value,\n                value    = values[feature];\n\n            // Missing or falsy values don't match.\n            if (!value) { return false; }\n\n            switch (feature) {\n                case 'orientation':\n                case 'scan':\n                    return value.toLowerCase() === expValue.toLowerCase();\n\n                case 'width':\n                case 'height':\n                case 'device-width':\n                case 'device-height':\n                    expValue = toPx(expValue);\n                    value    = toPx(value);\n                    break;\n\n                case 'resolution':\n                    expValue = toDpi(expValue);\n                    value    = toDpi(value);\n                    break;\n\n                case 'aspect-ratio':\n                case 'device-aspect-ratio':\n                case /* Deprecated */ 'device-pixel-ratio':\n                    expValue = toDecimal(expValue);\n                    value    = toDecimal(value);\n                    break;\n\n                case 'grid':\n                case 'color':\n                case 'color-index':\n                case 'monochrome':\n                    expValue = parseInt(expValue, 10) || 1;\n                    value    = parseInt(value, 10) || 0;\n                    break;\n            }\n\n            switch (modifier) {\n                case 'min': return value >= expValue;\n                case 'max': return value <= expValue;\n                default   : return value === expValue;\n            }\n        });\n\n        return (expressionsMatch && !inverse) || (!expressionsMatch && inverse);\n    });\n}\n\nfunction parseQuery(mediaQuery) {\n    return mediaQuery.split(',').map(function (query) {\n        query = query.trim();\n\n        var captures    = query.match(RE_MEDIA_QUERY),\n            modifier    = captures[1],\n            type        = captures[2],\n            expressions = captures[3] || '',\n            parsed      = {};\n\n        parsed.inverse = !!modifier && modifier.toLowerCase() === 'not';\n        parsed.type    = type ? type.toLowerCase() : 'all';\n\n        // Split expressions into a list.\n        expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n\n        parsed.expressions = expressions.map(function (expression) {\n            var captures = expression.match(RE_MQ_EXPRESSION),\n                feature  = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n\n            return {\n                modifier: feature[1],\n                feature : feature[2],\n                value   : captures[2]\n            };\n        });\n\n        return parsed;\n    });\n}\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction toDecimal(ratio) {\n    var decimal = Number(ratio),\n        numbers;\n\n    if (!decimal) {\n        numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n        decimal = numbers[1] / numbers[2];\n    }\n\n    return decimal;\n}\n\nfunction toDpi(resolution) {\n    var value = parseFloat(resolution),\n        units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n\n    switch (units) {\n        case 'dpcm': return value / 2.54;\n        case 'dppx': return value * 96;\n        default    : return value;\n    }\n}\n\nfunction toPx(length) {\n    var value = parseFloat(length),\n        units = String(length).match(RE_LENGTH_UNIT)[1];\n\n    switch (units) {\n        case 'em' : return value * 16;\n        case 'rem': return value * 16;\n        case 'cm' : return value * 96 / 2.54;\n        case 'mm' : return value * 96 / 2.54 / 10;\n        case 'in' : return value * 96;\n        case 'pt' : return value * 72;\n        case 'pc' : return value * 72 / 12;\n        default   : return value;\n    }\n}\n"],
  "mappings": ";;;;;AAAA;AAAA;AAQA,YAAQ,QAAQ;AAChB,YAAQ,QAAQ;AAIhB,QAAI,iBAAqB;AAAzB,QACI,mBAAqB;AADzB,QAEI,gBAAqB;AAFzB,QAGI,iBAAqB;AAHzB,QAII,qBAAqB;AAEzB,aAAS,WAAW,YAAY,QAAQ;AACpC,aAAO,WAAW,UAAU,EAAE,KAAK,SAAU,OAAO;AAChD,YAAI,UAAU,MAAM;AAIpB,YAAI,YAAY,MAAM,SAAS,SAAS,OAAO,SAAS,MAAM;AAG9D,YAAK,aAAa,WAAY,EAAE,aAAa,UAAU;AACnD,iBAAO;AAAA,QACX;AAEA,YAAI,mBAAmB,MAAM,YAAY,MAAM,SAAU,YAAY;AACjE,cAAI,UAAW,WAAW,SACtB,WAAW,WAAW,UACtB,WAAW,WAAW,OACtB,QAAW,OAAO;AAGtB,cAAI,CAAC,OAAO;AAAE,mBAAO;AAAA,UAAO;AAE5B,kBAAQ,SAAS;AAAA,YACb,KAAK;AAAA,YACL,KAAK;AACD,qBAAO,MAAM,YAAY,MAAM,SAAS,YAAY;AAAA,YAExD,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACD,yBAAW,KAAK,QAAQ;AACxB,sBAAW,KAAK,KAAK;AACrB;AAAA,YAEJ,KAAK;AACD,yBAAW,MAAM,QAAQ;AACzB,sBAAW,MAAM,KAAK;AACtB;AAAA,YAEJ,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAsB;AAClB,yBAAW,UAAU,QAAQ;AAC7B,sBAAW,UAAU,KAAK;AAC1B;AAAA,YAEJ,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACD,yBAAW,SAAS,UAAU,EAAE,KAAK;AACrC,sBAAW,SAAS,OAAO,EAAE,KAAK;AAClC;AAAA,UACR;AAEA,kBAAQ,UAAU;AAAA,YACd,KAAK;AAAO,qBAAO,SAAS;AAAA,YAC5B,KAAK;AAAO,qBAAO,SAAS;AAAA,YAC5B;AAAY,qBAAO,UAAU;AAAA,UACjC;AAAA,QACJ,CAAC;AAED,eAAQ,oBAAoB,CAAC,WAAa,CAAC,oBAAoB;AAAA,MACnE,CAAC;AAAA,IACL;AAEA,aAAS,WAAW,YAAY;AAC5B,aAAO,WAAW,MAAM,GAAG,EAAE,IAAI,SAAU,OAAO;AAC9C,gBAAQ,MAAM,KAAK;AAEnB,YAAI,WAAc,MAAM,MAAM,cAAc,GACxC,WAAc,SAAS,IACvB,OAAc,SAAS,IACvB,cAAc,SAAS,MAAM,IAC7B,SAAc,CAAC;AAEnB,eAAO,UAAU,CAAC,CAAC,YAAY,SAAS,YAAY,MAAM;AAC1D,eAAO,OAAU,OAAO,KAAK,YAAY,IAAI;AAG7C,sBAAc,YAAY,MAAM,aAAa,KAAK,CAAC;AAEnD,eAAO,cAAc,YAAY,IAAI,SAAU,YAAY;AACvD,cAAIA,YAAW,WAAW,MAAM,gBAAgB,GAC5C,UAAWA,UAAS,GAAG,YAAY,EAAE,MAAM,aAAa;AAE5D,iBAAO;AAAA,YACH,UAAU,QAAQ;AAAA,YAClB,SAAU,QAAQ;AAAA,YAClB,OAAUA,UAAS;AAAA,UACvB;AAAA,QACJ,CAAC;AAED,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AAIA,aAAS,UAAU,OAAO;AACtB,UAAI,UAAU,OAAO,KAAK,GACtB;AAEJ,UAAI,CAAC,SAAS;AACV,kBAAU,MAAM,MAAM,sBAAsB;AAC5C,kBAAU,QAAQ,KAAK,QAAQ;AAAA,MACnC;AAEA,aAAO;AAAA,IACX;AAEA,aAAS,MAAM,YAAY;AACvB,UAAI,QAAQ,WAAW,UAAU,GAC7B,QAAQ,OAAO,UAAU,EAAE,MAAM,kBAAkB,EAAE;AAEzD,cAAQ,OAAO;AAAA,QACX,KAAK;AAAQ,iBAAO,QAAQ;AAAA,QAC5B,KAAK;AAAQ,iBAAO,QAAQ;AAAA,QAC5B;AAAa,iBAAO;AAAA,MACxB;AAAA,IACJ;AAEA,aAAS,KAAK,QAAQ;AAClB,UAAI,QAAQ,WAAW,MAAM,GACzB,QAAQ,OAAO,MAAM,EAAE,MAAM,cAAc,EAAE;AAEjD,cAAQ,OAAO;AAAA,QACX,KAAK;AAAO,iBAAO,QAAQ;AAAA,QAC3B,KAAK;AAAO,iBAAO,QAAQ;AAAA,QAC3B,KAAK;AAAO,iBAAO,QAAQ,KAAK;AAAA,QAChC,KAAK;AAAO,iBAAO,QAAQ,KAAK,OAAO;AAAA,QACvC,KAAK;AAAO,iBAAO,QAAQ;AAAA,QAC3B,KAAK;AAAO,iBAAO,QAAQ;AAAA,QAC3B,KAAK;AAAO,iBAAO,QAAQ,KAAK;AAAA,QAChC;AAAY,iBAAO;AAAA,MACvB;AAAA,IACJ;AAAA;AAAA;",
  "names": ["captures"]
}
